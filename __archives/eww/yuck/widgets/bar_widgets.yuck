(defwidget panel_launcher [] (box :class "button-bin launcher"
    (button
        :class "button launcher"
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu app_launcher"
        (label :class "icon" :text "" :halign "center")
    )
))

(defwidget panel_workspaces [orientation] (box :class "button-bin"
    (eventbox :class "button workspaces"
        (box
            :space-evenly false
            :orientation orientation
            (for workspace in {workspaces.workspaces}
                (button
                    :class "workspace-btn ${workspace.id == workspaces.active ? "active" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    :valign "center"
                    ; (label :class "icon" :text {workspace.windows > 0 ? "${workspace.id == workspaces.active ? " " : ""}" : ""})
                    ; (label :class "icon" :text {workspace.windows > 0 ? "${workspace.id == workspaces.active ? " " : ""}" : ""})
                    (label :class "icon" :text {
                      workspace.id == "1"? " " :
                      workspace.id == "2"? " " :
                      workspace.id == "3"? " " :
                      workspace.id == "4"? " " :
                      workspace.id == "5"? " " :
                      workspace.id == "6"? " " :
                      workspace.id == "7"? " " :
                      ""
                      })
                )
            )
        )
    )
))

(defwidget panel_window [angle] (box :class "button-bin"
    (button :class "button window" 
        (label
            :visible {window != "null" ? true : false}
            :text {window}
            :angle angle)
    )
))

(defwidget panel_separator [orientation dots visible] (box
    :orientation orientation
    :class "separator"
    :space-evenly false
    :visible visible
    (for dot in dots
        (box :class "dot" :halign "center" :hexpand true :valign "center"))))

(defwidget controls_slider [control reveal value onchange icon text orientation transition] (eventbox
    :onscroll "${EWW_CONFIG_DIR}/scripts/${control} {}"
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
        :space-evenly false
        :orientation orientation
        ; (revealer
        ;     :transition transition
        ;     :duration "300ms"
        ;     :reveal reveal
        ;     :class "reveal"
        ;     (eventbox :class "slider ${orientation}" (scale
        ;         :orientation orientation
        ;         :flipped {orientation == "v"}
        ;         :value value
        ;         :onchange onchange)))
        (label
            :class "${control} icon item"
            :icon icon
            :text "${icon} ${text}")
    )
))


(defwidget controls_icon [control reveal value icon text style angle orientation transition visible] (eventbox
    :visible visible
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
        :class "item"
        :space-evenly false
        :orientation orientation
        ; (revealer
        ;     :transition transition
        ;     :duration "300ms"
        ;     :reveal reveal
        ;     :class "reveal"
        ;     (label
        ;         :class "${style} ${control}"
        ;         :angle angle
        ;         :text value)
        ; )
        (label
            :class "${style} ${control} icon"
            :text " ${icon} ${value} ")
    )
))

(defvar bluetooth_reveal false)
(defvar bt_speaker_reveal true)
(defvar mute_reveal true)
(defvar notifications_reveal true)
(defvar battery_reveal true)
(defvar network_reveal true)
(defvar volume_reveal false)
(defvar screen_reveal false)
(defwidget panel_controls [orientation] (box
    :class "controls"
    :orientation orientation
    :space-evenly false
    ; (controls_icon
    ;     :orientation orientation
    ;     :transition {orientation == "v" ? "slideup" : "slideleft"}
    ;     :control "bluetooth"
    ;     :reveal bluetooth_reveal
    ;     ; :visible {bluetooth.state == "on"}
    ;     :visible {arraylength(bluetooth.connected_devices) > 0}
    ;     :value {arraylength(bluetooth.connected_devices) == 0 ? "Not Connected" : bluetooth.connected_devices[0].name}
    ;     :icon {bluetooth.icon}
    ;     :style {bluetooth.state}
    ;     :text ""
    ;     :angle {orientation == "v" ? 90 : 0})
    ; (controls_icon
    ;     :orientation orientation
    ;     :transition {orientation == "v" ? "slideup" : "slideleft"}
    ;     :control "bt_speaker"
    ;     :reveal bt_speaker_reveal
    ;     :visible {arraylength(bluetooth.connected_devices) > 0}
    ;     :value {bluetooth.connected_devices[0].name}
    ;     :icon {bluetooth.connected_devices[0].icon}
    ;     :style ""
    ;     :text ""
    ;     :angle {orientation == "v" ? 90 : 0})
    ; (controls_icon
    ;     :orientation orientation
    ;     :transition {orientation == "v" ? "slideup" : "slideleft"}
    ;     :control "mute"
    ;     :reveal mute_reveal
    ;     :visible {volume.mute.state == "on"}
    ;     :value "Muted"
    ;     :icon {volume.mute.icon}
    ;     :style ""
    ;     :text ""
    ;     :angle {orientation == "v" ? 90 : 0})
    (controls_slider
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "volume"
        :reveal volume_reveal
        :value {volume.level}
        :onchange "${EWW_CONFIG_DIR}/scripts/volume set {}"
        :text "${volume.level}% "
        :icon {volume.icon})
    ; (controls_slider
    ;     :orientation orientation
    ;     :transition {orientation == "v" ? "slideup" : "slideleft"}
    ;     :control "screen"
    ;     :reveal screen_reveal
    ;     :value {brightness.screen.level}
    ;     :onchange "${EWW_CONFIG_DIR}/scripts/brightness set_screen {}"
    ;     :text ""
    ;     :icon {brightness.screen.icon})
    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "battery"
        :reveal battery_reveal
        :visible {battery.available}
        :value {battery.percent}
        :icon {battery.icon}
        :style {battery.state}
        :text ""
        :angle 0)
    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "network"
        :reveal network_reveal
        :visible true
        :value {network.wifi.ssid}
        :icon {network[network.primary].icon}
        :style {network[network.primary].style}
        :text ""
        :angle {orientation == "v" ? 90 : 0}) 
    ; (controls_icon
    ;     :orientation orientation
    ;     :transition {orientation == "v" ? "slideup" : "slideleft"}
    ;     :control "notifications"
    ;     :reveal notifications_reveal
    ;     :value {notifications.count}
    ;     :icon {notifications.icon}
    ;     :style {notifications.count > 0 ? "active" : ""}
    ;     :text ""
    ;     :angle 0)
))

(defwidget panel_system_indicators [orientation] (box :class "button-bin"
    (eventbox
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu quicksettings"
        :class "button system-indicators"
        (panel_controls :orientation orientation)
    )
))

(defwidget panel_powermenu [] (box :class "button-bin powermenu" (button
    :class "button powermenu"
    :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu powermenu"
    (label :class "icon" :text "")
)))

(defwidget panel_colorpicker [] (box :class "button-bin"
    (button
        :class "button colorpicker"
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher colorpicker"
        (label :class "icon" :text "󰈊")
    )
))
